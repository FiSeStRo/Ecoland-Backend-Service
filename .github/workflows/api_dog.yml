name: api_dog

on:
  push:
    branches: [main]
    paths:
      - "**.go"
      - "go.mod"
      - "go.sum"
  pull_request:
    branches: [main]
    paths:
      - "**.go"
      - "go.mod"
      - "go.sum"

jobs:
  test-main-service-api-dog:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v1

      - name: Install docker-compose
        run: |
          sudo apt-get update
          sudo apt-get install -y docker-compose
      - name: Create go/.env file
        run: |
          touch service/main-service/.env
          echo "DB_USER=${{ secrets.DB_USER }}" > service/main_service/.env
          echo "DB_PW=${{ secrets.DB_PW }}" >> service/main_service/.env
          echo "DB_HOST=${{secrets.DB_HOST}}" >> service/main_service/.env
          echo "DB_PORT=${{ secrets.DB_PORT }}" >> service/main_service/.env
          echo "DB_NAME=${{ secrets.DB_NAME }}" >> service/main_service/.env
          echo "JWT_SECRET=${{secrets.JWT_SECRET}}" >> service/main_service/.env
          echo "JWT_EXPIRATION_TIME_AT=${{secrets.JWT_EXPIRATION_TIME_AT}}" >> service/main_service/.env
          echo "JWT_EXPIRATION_TIME_RT=${{secrets.JWT_EXPIRATION_TIME_AT}}" >> service/main+service/.env
          echo "JWT_ISSUER=${{secrets.JWT_ISSUER}}" >> service/main_service/.env

      - name: Start Docker Compose services
        env:
          DB_PW: ${{ secrets.DB_PW }}
          DB_USER: ${{ secrets.DB_USER }}
          DB_HOST: ${{ secrets.DB_HOST }}
          DB_NAME: ${{ secrets.DB_NAME }}
          DB_PORT: ${{ secrets.DB_PORT }}
        run: docker compose --profile go up -d

      - name: Check container status
        run: docker ps

      - name: Wait for API services to be ready
        run: |
          for i in {1..30}; do
            docker ps
            if curl -s http://localhost:8081/; then
              echo ""Service is up and healthy""
              exit 0
            fi
            echo "Waiting for service..."
            sleep 2
          done
          echo "Service did not become ready in time." >&2
          exit 1

      - name: Setup Node.js environment
        uses: actions/setup-node@v2
        with:
          node-version: "14"

      - name: Install Apidog CLI
        run: npm install -g apidog-cli

      - name: Run API Test Scenarios
        run: |
          apidog run --access-token $APIDOG_ACCESS_TOKEN -t 955624 -e 3096210 -n 1 -r html,cli
          apidog run --access-token $APIDOG_ACCESS_TOKEN -t 955654 -e 3096210 -n 1 -r html,cli
          apidog run --access-token $APIDOG_ACCESS_TOKEN -t 955695 -e 3096210 -n 1 -r html,cli
          apidog run --access-token $APIDOG_ACCESS_TOKEN -t 955727 -e 3096210 -n 1 -r html,cli
        env:
          APIDOG_ACCESS_TOKEN: ${{ secrets.APIDOG_ACCESS_TOKEN }}

      - name: Shutdown Docker Compose services
        run: docker compose --profile go down
